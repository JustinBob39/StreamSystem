/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ntsc.cas.cn.avro.difference.oneRound;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SingleStation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -854524039583270140L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SingleStation\",\"namespace\":\"ntsc.cas.cn.avro.difference.oneRound\",\"fields\":[{\"name\":\"frameStatus\",\"type\":{\"type\":\"enum\",\"name\":\"FrameStatus\",\"symbols\":[\"INITIAL\",\"NORMAL\",\"TIMEOUT\"]},\"default\":\"NORMAL\"},{\"name\":\"parentId\",\"type\":\"int\",\"doc\":\"range 001,002,003,...,175\"},{\"name\":\"parentEventTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"parentStatus\",\"type\":{\"type\":\"enum\",\"name\":\"Status\",\"symbols\":[\"NORMAL\",\"FAULT\",\"MAINTENANCE\"]}},{\"name\":\"children\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Child\",\"fields\":[{\"name\":\"childId\",\"type\":\"int\",\"doc\":\"range 01,02,03,...,16\"},{\"name\":\"childEventTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"childDuration\",\"type\":{\"type\":\"enum\",\"name\":\"Duration\",\"symbols\":[\"_3MIN\",\"_5MIN\",\"_10MIN\"]}},{\"name\":\"childValueFirst\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":5,\"scale\":1}},{\"name\":\"childValueSecond\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":5,\"scale\":4}}]}},\"doc\":\"3 child\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<SingleStation> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SingleStation> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SingleStation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SingleStation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SingleStation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SingleStation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SingleStation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SingleStation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SingleStation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private ntsc.cas.cn.avro.difference.oneRound.FrameStatus frameStatus;
  /** range 001,002,003,...,175 */
  private int parentId;
  private java.time.Instant parentEventTime;
  private ntsc.cas.cn.avro.difference.oneRound.Status parentStatus;
  /** 3 child */
  private java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child> children;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SingleStation() {}

  /**
   * All-args constructor.
   * @param frameStatus The new value for frameStatus
   * @param parentId range 001,002,003,...,175
   * @param parentEventTime The new value for parentEventTime
   * @param parentStatus The new value for parentStatus
   * @param children 3 child
   */
  public SingleStation(ntsc.cas.cn.avro.difference.oneRound.FrameStatus frameStatus, java.lang.Integer parentId, java.time.Instant parentEventTime, ntsc.cas.cn.avro.difference.oneRound.Status parentStatus, java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child> children) {
    this.frameStatus = frameStatus;
    this.parentId = parentId;
    this.parentEventTime = parentEventTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.parentStatus = parentStatus;
    this.children = children;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return frameStatus;
    case 1: return parentId;
    case 2: return parentEventTime;
    case 3: return parentStatus;
    case 4: return children;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: frameStatus = (ntsc.cas.cn.avro.difference.oneRound.FrameStatus)value$; break;
    case 1: parentId = (java.lang.Integer)value$; break;
    case 2: parentEventTime = (java.time.Instant)value$; break;
    case 3: parentStatus = (ntsc.cas.cn.avro.difference.oneRound.Status)value$; break;
    case 4: children = (java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'frameStatus' field.
   * @return The value of the 'frameStatus' field.
   */
  public ntsc.cas.cn.avro.difference.oneRound.FrameStatus getFrameStatus() {
    return frameStatus;
  }


  /**
   * Sets the value of the 'frameStatus' field.
   * @param value the value to set.
   */
  public void setFrameStatus(ntsc.cas.cn.avro.difference.oneRound.FrameStatus value) {
    this.frameStatus = value;
  }

  /**
   * Gets the value of the 'parentId' field.
   * @return range 001,002,003,...,175
   */
  public int getParentId() {
    return parentId;
  }


  /**
   * Sets the value of the 'parentId' field.
   * range 001,002,003,...,175
   * @param value the value to set.
   */
  public void setParentId(int value) {
    this.parentId = value;
  }

  /**
   * Gets the value of the 'parentEventTime' field.
   * @return The value of the 'parentEventTime' field.
   */
  public java.time.Instant getParentEventTime() {
    return parentEventTime;
  }


  /**
   * Sets the value of the 'parentEventTime' field.
   * @param value the value to set.
   */
  public void setParentEventTime(java.time.Instant value) {
    this.parentEventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'parentStatus' field.
   * @return The value of the 'parentStatus' field.
   */
  public ntsc.cas.cn.avro.difference.oneRound.Status getParentStatus() {
    return parentStatus;
  }


  /**
   * Sets the value of the 'parentStatus' field.
   * @param value the value to set.
   */
  public void setParentStatus(ntsc.cas.cn.avro.difference.oneRound.Status value) {
    this.parentStatus = value;
  }

  /**
   * Gets the value of the 'children' field.
   * @return 3 child
   */
  public java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child> getChildren() {
    return children;
  }


  /**
   * Sets the value of the 'children' field.
   * 3 child
   * @param value the value to set.
   */
  public void setChildren(java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child> value) {
    this.children = value;
  }

  /**
   * Creates a new SingleStation RecordBuilder.
   * @return A new SingleStation RecordBuilder
   */
  public static ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder newBuilder() {
    return new ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder();
  }

  /**
   * Creates a new SingleStation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SingleStation RecordBuilder
   */
  public static ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder newBuilder(ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder other) {
    if (other == null) {
      return new ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder();
    } else {
      return new ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder(other);
    }
  }

  /**
   * Creates a new SingleStation RecordBuilder by copying an existing SingleStation instance.
   * @param other The existing instance to copy.
   * @return A new SingleStation RecordBuilder
   */
  public static ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder newBuilder(ntsc.cas.cn.avro.difference.oneRound.SingleStation other) {
    if (other == null) {
      return new ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder();
    } else {
      return new ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder(other);
    }
  }

  /**
   * RecordBuilder for SingleStation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SingleStation>
    implements org.apache.avro.data.RecordBuilder<SingleStation> {

    private ntsc.cas.cn.avro.difference.oneRound.FrameStatus frameStatus;
    /** range 001,002,003,...,175 */
    private int parentId;
    private java.time.Instant parentEventTime;
    private ntsc.cas.cn.avro.difference.oneRound.Status parentStatus;
    /** 3 child */
    private java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child> children;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.frameStatus)) {
        this.frameStatus = data().deepCopy(fields()[0].schema(), other.frameStatus);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.parentEventTime)) {
        this.parentEventTime = data().deepCopy(fields()[2].schema(), other.parentEventTime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.parentStatus)) {
        this.parentStatus = data().deepCopy(fields()[3].schema(), other.parentStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.children)) {
        this.children = data().deepCopy(fields()[4].schema(), other.children);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing SingleStation instance
     * @param other The existing instance to copy.
     */
    private Builder(ntsc.cas.cn.avro.difference.oneRound.SingleStation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.frameStatus)) {
        this.frameStatus = data().deepCopy(fields()[0].schema(), other.frameStatus);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parentId)) {
        this.parentId = data().deepCopy(fields()[1].schema(), other.parentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.parentEventTime)) {
        this.parentEventTime = data().deepCopy(fields()[2].schema(), other.parentEventTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.parentStatus)) {
        this.parentStatus = data().deepCopy(fields()[3].schema(), other.parentStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.children)) {
        this.children = data().deepCopy(fields()[4].schema(), other.children);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'frameStatus' field.
      * @return The value.
      */
    public ntsc.cas.cn.avro.difference.oneRound.FrameStatus getFrameStatus() {
      return frameStatus;
    }


    /**
      * Sets the value of the 'frameStatus' field.
      * @param value The value of 'frameStatus'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder setFrameStatus(ntsc.cas.cn.avro.difference.oneRound.FrameStatus value) {
      validate(fields()[0], value);
      this.frameStatus = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'frameStatus' field has been set.
      * @return True if the 'frameStatus' field has been set, false otherwise.
      */
    public boolean hasFrameStatus() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'frameStatus' field.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder clearFrameStatus() {
      frameStatus = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentId' field.
      * range 001,002,003,...,175
      * @return The value.
      */
    public int getParentId() {
      return parentId;
    }


    /**
      * Sets the value of the 'parentId' field.
      * range 001,002,003,...,175
      * @param value The value of 'parentId'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder setParentId(int value) {
      validate(fields()[1], value);
      this.parentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'parentId' field has been set.
      * range 001,002,003,...,175
      * @return True if the 'parentId' field has been set, false otherwise.
      */
    public boolean hasParentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'parentId' field.
      * range 001,002,003,...,175
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder clearParentId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentEventTime' field.
      * @return The value.
      */
    public java.time.Instant getParentEventTime() {
      return parentEventTime;
    }


    /**
      * Sets the value of the 'parentEventTime' field.
      * @param value The value of 'parentEventTime'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder setParentEventTime(java.time.Instant value) {
      validate(fields()[2], value);
      this.parentEventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'parentEventTime' field has been set.
      * @return True if the 'parentEventTime' field has been set, false otherwise.
      */
    public boolean hasParentEventTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'parentEventTime' field.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder clearParentEventTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentStatus' field.
      * @return The value.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Status getParentStatus() {
      return parentStatus;
    }


    /**
      * Sets the value of the 'parentStatus' field.
      * @param value The value of 'parentStatus'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder setParentStatus(ntsc.cas.cn.avro.difference.oneRound.Status value) {
      validate(fields()[3], value);
      this.parentStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'parentStatus' field has been set.
      * @return True if the 'parentStatus' field has been set, false otherwise.
      */
    public boolean hasParentStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'parentStatus' field.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder clearParentStatus() {
      parentStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'children' field.
      * 3 child
      * @return The value.
      */
    public java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child> getChildren() {
      return children;
    }


    /**
      * Sets the value of the 'children' field.
      * 3 child
      * @param value The value of 'children'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder setChildren(java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child> value) {
      validate(fields()[4], value);
      this.children = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'children' field has been set.
      * 3 child
      * @return True if the 'children' field has been set, false otherwise.
      */
    public boolean hasChildren() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'children' field.
      * 3 child
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.SingleStation.Builder clearChildren() {
      children = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SingleStation build() {
      try {
        SingleStation record = new SingleStation();
        record.frameStatus = fieldSetFlags()[0] ? this.frameStatus : (ntsc.cas.cn.avro.difference.oneRound.FrameStatus) defaultValue(fields()[0]);
        record.parentId = fieldSetFlags()[1] ? this.parentId : (java.lang.Integer) defaultValue(fields()[1]);
        record.parentEventTime = fieldSetFlags()[2] ? this.parentEventTime : (java.time.Instant) defaultValue(fields()[2]);
        record.parentStatus = fieldSetFlags()[3] ? this.parentStatus : (ntsc.cas.cn.avro.difference.oneRound.Status) defaultValue(fields()[3]);
        record.children = fieldSetFlags()[4] ? this.children : (java.util.List<ntsc.cas.cn.avro.difference.oneRound.Child>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SingleStation>
    WRITER$ = (org.apache.avro.io.DatumWriter<SingleStation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SingleStation>
    READER$ = (org.apache.avro.io.DatumReader<SingleStation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










