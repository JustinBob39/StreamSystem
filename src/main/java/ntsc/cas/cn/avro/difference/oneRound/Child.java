/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ntsc.cas.cn.avro.difference.oneRound;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Child extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6222699430527110358L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Child\",\"namespace\":\"ntsc.cas.cn.avro.difference.oneRound\",\"fields\":[{\"name\":\"childId\",\"type\":\"int\",\"doc\":\"range 01,02,03,...,16\"},{\"name\":\"childEventTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"childDuration\",\"type\":{\"type\":\"enum\",\"name\":\"Duration\",\"symbols\":[\"_3MIN\",\"_5MIN\",\"_10MIN\"]}},{\"name\":\"childValueFirst\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":5,\"scale\":1}},{\"name\":\"childValueSecond\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":5,\"scale\":4}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Child> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Child> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Child> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Child> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Child> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Child to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Child from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Child instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Child fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** range 01,02,03,...,16 */
  private int childId;
  private java.time.Instant childEventTime;
  private ntsc.cas.cn.avro.difference.oneRound.Duration childDuration;
  private java.nio.ByteBuffer childValueFirst;
  private java.nio.ByteBuffer childValueSecond;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Child() {}

  /**
   * All-args constructor.
   * @param childId range 01,02,03,...,16
   * @param childEventTime The new value for childEventTime
   * @param childDuration The new value for childDuration
   * @param childValueFirst The new value for childValueFirst
   * @param childValueSecond The new value for childValueSecond
   */
  public Child(java.lang.Integer childId, java.time.Instant childEventTime, ntsc.cas.cn.avro.difference.oneRound.Duration childDuration, java.nio.ByteBuffer childValueFirst, java.nio.ByteBuffer childValueSecond) {
    this.childId = childId;
    this.childEventTime = childEventTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.childDuration = childDuration;
    this.childValueFirst = childValueFirst;
    this.childValueSecond = childValueSecond;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return childId;
    case 1: return childEventTime;
    case 2: return childDuration;
    case 3: return childValueFirst;
    case 4: return childValueSecond;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: childId = (java.lang.Integer)value$; break;
    case 1: childEventTime = (java.time.Instant)value$; break;
    case 2: childDuration = (ntsc.cas.cn.avro.difference.oneRound.Duration)value$; break;
    case 3: childValueFirst = (java.nio.ByteBuffer)value$; break;
    case 4: childValueSecond = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'childId' field.
   * @return range 01,02,03,...,16
   */
  public int getChildId() {
    return childId;
  }


  /**
   * Sets the value of the 'childId' field.
   * range 01,02,03,...,16
   * @param value the value to set.
   */
  public void setChildId(int value) {
    this.childId = value;
  }

  /**
   * Gets the value of the 'childEventTime' field.
   * @return The value of the 'childEventTime' field.
   */
  public java.time.Instant getChildEventTime() {
    return childEventTime;
  }


  /**
   * Sets the value of the 'childEventTime' field.
   * @param value the value to set.
   */
  public void setChildEventTime(java.time.Instant value) {
    this.childEventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'childDuration' field.
   * @return The value of the 'childDuration' field.
   */
  public ntsc.cas.cn.avro.difference.oneRound.Duration getChildDuration() {
    return childDuration;
  }


  /**
   * Sets the value of the 'childDuration' field.
   * @param value the value to set.
   */
  public void setChildDuration(ntsc.cas.cn.avro.difference.oneRound.Duration value) {
    this.childDuration = value;
  }

  /**
   * Gets the value of the 'childValueFirst' field.
   * @return The value of the 'childValueFirst' field.
   */
  public java.nio.ByteBuffer getChildValueFirst() {
    return childValueFirst;
  }


  /**
   * Sets the value of the 'childValueFirst' field.
   * @param value the value to set.
   */
  public void setChildValueFirst(java.nio.ByteBuffer value) {
    this.childValueFirst = value;
  }

  /**
   * Gets the value of the 'childValueSecond' field.
   * @return The value of the 'childValueSecond' field.
   */
  public java.nio.ByteBuffer getChildValueSecond() {
    return childValueSecond;
  }


  /**
   * Sets the value of the 'childValueSecond' field.
   * @param value the value to set.
   */
  public void setChildValueSecond(java.nio.ByteBuffer value) {
    this.childValueSecond = value;
  }

  /**
   * Creates a new Child RecordBuilder.
   * @return A new Child RecordBuilder
   */
  public static ntsc.cas.cn.avro.difference.oneRound.Child.Builder newBuilder() {
    return new ntsc.cas.cn.avro.difference.oneRound.Child.Builder();
  }

  /**
   * Creates a new Child RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Child RecordBuilder
   */
  public static ntsc.cas.cn.avro.difference.oneRound.Child.Builder newBuilder(ntsc.cas.cn.avro.difference.oneRound.Child.Builder other) {
    if (other == null) {
      return new ntsc.cas.cn.avro.difference.oneRound.Child.Builder();
    } else {
      return new ntsc.cas.cn.avro.difference.oneRound.Child.Builder(other);
    }
  }

  /**
   * Creates a new Child RecordBuilder by copying an existing Child instance.
   * @param other The existing instance to copy.
   * @return A new Child RecordBuilder
   */
  public static ntsc.cas.cn.avro.difference.oneRound.Child.Builder newBuilder(ntsc.cas.cn.avro.difference.oneRound.Child other) {
    if (other == null) {
      return new ntsc.cas.cn.avro.difference.oneRound.Child.Builder();
    } else {
      return new ntsc.cas.cn.avro.difference.oneRound.Child.Builder(other);
    }
  }

  /**
   * RecordBuilder for Child instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Child>
    implements org.apache.avro.data.RecordBuilder<Child> {

    /** range 01,02,03,...,16 */
    private int childId;
    private java.time.Instant childEventTime;
    private ntsc.cas.cn.avro.difference.oneRound.Duration childDuration;
    private java.nio.ByteBuffer childValueFirst;
    private java.nio.ByteBuffer childValueSecond;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ntsc.cas.cn.avro.difference.oneRound.Child.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.childId)) {
        this.childId = data().deepCopy(fields()[0].schema(), other.childId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.childEventTime)) {
        this.childEventTime = data().deepCopy(fields()[1].schema(), other.childEventTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.childDuration)) {
        this.childDuration = data().deepCopy(fields()[2].schema(), other.childDuration);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.childValueFirst)) {
        this.childValueFirst = data().deepCopy(fields()[3].schema(), other.childValueFirst);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.childValueSecond)) {
        this.childValueSecond = data().deepCopy(fields()[4].schema(), other.childValueSecond);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Child instance
     * @param other The existing instance to copy.
     */
    private Builder(ntsc.cas.cn.avro.difference.oneRound.Child other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.childId)) {
        this.childId = data().deepCopy(fields()[0].schema(), other.childId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.childEventTime)) {
        this.childEventTime = data().deepCopy(fields()[1].schema(), other.childEventTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.childDuration)) {
        this.childDuration = data().deepCopy(fields()[2].schema(), other.childDuration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.childValueFirst)) {
        this.childValueFirst = data().deepCopy(fields()[3].schema(), other.childValueFirst);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.childValueSecond)) {
        this.childValueSecond = data().deepCopy(fields()[4].schema(), other.childValueSecond);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'childId' field.
      * range 01,02,03,...,16
      * @return The value.
      */
    public int getChildId() {
      return childId;
    }


    /**
      * Sets the value of the 'childId' field.
      * range 01,02,03,...,16
      * @param value The value of 'childId'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder setChildId(int value) {
      validate(fields()[0], value);
      this.childId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'childId' field has been set.
      * range 01,02,03,...,16
      * @return True if the 'childId' field has been set, false otherwise.
      */
    public boolean hasChildId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'childId' field.
      * range 01,02,03,...,16
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder clearChildId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'childEventTime' field.
      * @return The value.
      */
    public java.time.Instant getChildEventTime() {
      return childEventTime;
    }


    /**
      * Sets the value of the 'childEventTime' field.
      * @param value The value of 'childEventTime'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder setChildEventTime(java.time.Instant value) {
      validate(fields()[1], value);
      this.childEventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'childEventTime' field has been set.
      * @return True if the 'childEventTime' field has been set, false otherwise.
      */
    public boolean hasChildEventTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'childEventTime' field.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder clearChildEventTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'childDuration' field.
      * @return The value.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Duration getChildDuration() {
      return childDuration;
    }


    /**
      * Sets the value of the 'childDuration' field.
      * @param value The value of 'childDuration'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder setChildDuration(ntsc.cas.cn.avro.difference.oneRound.Duration value) {
      validate(fields()[2], value);
      this.childDuration = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'childDuration' field has been set.
      * @return True if the 'childDuration' field has been set, false otherwise.
      */
    public boolean hasChildDuration() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'childDuration' field.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder clearChildDuration() {
      childDuration = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'childValueFirst' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getChildValueFirst() {
      return childValueFirst;
    }


    /**
      * Sets the value of the 'childValueFirst' field.
      * @param value The value of 'childValueFirst'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder setChildValueFirst(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.childValueFirst = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'childValueFirst' field has been set.
      * @return True if the 'childValueFirst' field has been set, false otherwise.
      */
    public boolean hasChildValueFirst() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'childValueFirst' field.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder clearChildValueFirst() {
      childValueFirst = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'childValueSecond' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getChildValueSecond() {
      return childValueSecond;
    }


    /**
      * Sets the value of the 'childValueSecond' field.
      * @param value The value of 'childValueSecond'.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder setChildValueSecond(java.nio.ByteBuffer value) {
      validate(fields()[4], value);
      this.childValueSecond = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'childValueSecond' field has been set.
      * @return True if the 'childValueSecond' field has been set, false otherwise.
      */
    public boolean hasChildValueSecond() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'childValueSecond' field.
      * @return This builder.
      */
    public ntsc.cas.cn.avro.difference.oneRound.Child.Builder clearChildValueSecond() {
      childValueSecond = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Child build() {
      try {
        Child record = new Child();
        record.childId = fieldSetFlags()[0] ? this.childId : (java.lang.Integer) defaultValue(fields()[0]);
        record.childEventTime = fieldSetFlags()[1] ? this.childEventTime : (java.time.Instant) defaultValue(fields()[1]);
        record.childDuration = fieldSetFlags()[2] ? this.childDuration : (ntsc.cas.cn.avro.difference.oneRound.Duration) defaultValue(fields()[2]);
        record.childValueFirst = fieldSetFlags()[3] ? this.childValueFirst : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.childValueSecond = fieldSetFlags()[4] ? this.childValueSecond : (java.nio.ByteBuffer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Child>
    WRITER$ = (org.apache.avro.io.DatumWriter<Child>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Child>
    READER$ = (org.apache.avro.io.DatumReader<Child>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










